{"version":3,"sources":["App.tsx","index.tsx"],"names":["useStyles","makeStyles","createStyles","imgWrapper","position","width","overflow","img","top","left","height","objectFit","outline","outlineOffset","Panel","i","j","split","this","App","classes","useState","undefined","imageData","setImageData","ratio","setRatio","panels","setPanels","useEffect","array","Array","map","fill","xs","buttonText","transform","x","y","Container","component","maxWidth","CssBaseline","Grid","container","spacing","item","justify","Typography","variant","row","direction","el","className","style","paddingTop","src","alt","key","Button","fullWidth","color","type","accept","hidden","onChange","e","files","target","file","length","Image","onload","URL","revokeObjectURL","naturalHeight","naturalWidth","createObjectURL","reader","FileReader","readAsDataURL","result","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b4f43233.chunk.js","sourcesContent":["import { VFC, useState, useEffect } from 'react';\nimport {\n  Button,\n  Container,\n  CssBaseline,\n  Grid,\n  GridSize,\n  Typography,\n} from '@material-ui/core';\nimport { createStyles, makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles(() =>\n  createStyles({\n    imgWrapper: {\n      position: 'relative',\n      width: '100%',\n      overflow: 'hidden',\n    },\n    img: {\n      position: 'absolute',\n      top: 0,\n      left: 0,\n      width: '100%',\n      height: '100%',\n      objectFit: 'cover',\n    },\n    outline: {\n      position: 'absolute',\n      top: 0,\n      left: 0,\n      width: '100%',\n      height: '100%',\n      outline: '1px solid black',\n      outlineOffset: -1,\n    },\n  })\n);\n\nclass Panel {\n  i: number;\n\n  j: number;\n\n  split: number;\n\n  constructor(i: number, j: number, split: number) {\n    this.i = i;\n    this.j = j;\n    this.split = split;\n  }\n\n  key(): number {\n    return this.i * (this.split + 2) + this.j;\n  }\n}\n\nconst App: VFC = () => {\n  const classes = useStyles();\n  const [imageData, setImageData] = useState<string | undefined>(undefined);\n  const [ratio, setRatio] = useState('100%');\n  const [split] = useState(4);\n  const [panels, setPanels] = useState<Panel[][]>([]);\n\n  useEffect(() => {\n    const array = [...Array<Panel[]>(split + 2)].map(() =>\n      Array<Panel>(split + 2).fill(new Panel(-1, -1, split))\n    );\n    for (let i = 0; i < split + 2; i += 1)\n      for (let j = 0; j < split + 2; j += 1)\n        array[i][j] = new Panel(i, j, split);\n    setPanels(array);\n  }, [split]);\n\n  const xs = (12 / split) as GridSize;\n  const buttonText = imageData ? 'Select another image' : 'Select image';\n\n  const transform = (i: number, j: number) => {\n    const x = 0.5 - (j - 0.5) / split;\n    const y = 0.5 - (i - 0.5) / split;\n    return `scale(${split}) translate(${x * 100}%, ${y * 100}%) `;\n  };\n\n  const onChangeInput = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const { target } = e;\n    const { files } = target;\n    const file = files && files.length ? files[0] : null;\n    if (!file) return;\n\n    const img = new Image();\n    img.onload = () => {\n      URL.revokeObjectURL(img.src);\n      setRatio(`${(img.naturalHeight / img.naturalWidth) * 100}%`);\n    };\n    img.src = URL.createObjectURL(file);\n\n    const reader = new FileReader();\n    reader.readAsDataURL(file);\n    reader.onload = () => {\n      const { result } = reader;\n\n      setImageData(result as string);\n    };\n  };\n\n  return (\n    <Container component=\"main\" maxWidth=\"xs\">\n      <CssBaseline />\n      <Grid container spacing={4}>\n        <Grid item container justify=\"center\">\n          <Typography component=\"h1\" variant=\"h5\">\n            Slide Puzzle Maker\n          </Typography>\n        </Grid>\n        {imageData && (\n          <>\n            <Grid item container xs={12}>\n              {panels.map((row, i) => {\n                if (i < 1 || split < i) return null;\n                return (\n                  <Grid item container direction=\"row\" key={row[0].key()}>\n                    {row.map((el, j) => {\n                      if (j < 1 || split < j) return null;\n                      return (\n                        <Grid\n                          item\n                          container\n                          key={el.key()}\n                          xs={xs}\n                          justify=\"center\"\n                        >\n                          <div\n                            className={classes.imgWrapper}\n                            style={{\n                              paddingTop: ratio,\n                            }}\n                          >\n                            <img\n                              src={imageData}\n                              alt=\"選択画像\"\n                              className={classes.img}\n                              style={{\n                                transform: transform(el.i, el.j),\n                              }}\n                            />\n                            <div className={classes.outline} />\n                          </div>\n                        </Grid>\n                      );\n                    })}\n                  </Grid>\n                );\n              })}\n            </Grid>\n          </>\n        )}\n        <Grid item container justify=\"center\">\n          <Button\n            fullWidth={!imageData}\n            variant=\"contained\"\n            color=\"primary\"\n            component=\"label\"\n          >\n            {buttonText}\n            <input\n              type=\"file\"\n              accept=\"image/*\"\n              hidden\n              onChange={onChangeInput}\n            />\n          </Button>\n        </Grid>\n      </Grid>\n    </Container>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}